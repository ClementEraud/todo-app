version: 2.1

parameters:
  run-build-back-end-job:
    type: boolean
    default: false
  run-build-front-end-job:
    type: boolean
    default: false

jobs:
  prepare-dependencies:
    docker:
      - image: circleci/node:16.10.0
    parameters:
      folder:
        default: ""
        type: string
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: npm_install_api-{{ checksum "<<parameters.folder>>/package-lock.json" }}
          paths:
            - <<parameters.folder>>/node_modules
      - run:
          name: Install Tools
          working_directory: ~/project/<<parameters.folder>>
          command: sudo npm install -g npm@latest && npm i
      - save_cache:
          key: npm_install_api-{{ checksum "<<parameters.folder>>/package-lock.json" }}
          paths:
            - <<parameters.folder>>/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - .

  back-end-checks:
    docker:
      - image: circleci/node:16.10.0
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Linter Check
          working_directory: ~/project/back-end
          command: npm run lint
      - run:
          name: Format Check
          working_directory: ~/project/back-end
          command: npm run format:check
      - run:
          name: Unit Test
          working_directory: ~/project/back-end
          command: npm run test
      - run:
          name: End-to-End Test
          working_directory: ~/project/back-end
          command: npm run test:e2e

  front-end-checks:
    docker:
      - image: circleci/node:16.10.0
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Linter Check
          working_directory: ~/project/front-end
          command: npm run lint
      - run:
          name: Prettier Check
          working_directory: ~/project/front-end
          command: npm run prettier-check

  build:
    docker:
      - image: circleci/node:16.10.0
    working_directory: ~/project
    parameters:
      image:
        default: ""
        type: string
      registry:
        default: ""
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Login to Scaleway image registry
          command: docker login rg.fr-par.scw.cloud/clement-registry -u nologin -p $SCW_SECRET_KEY
      - run:
          name: Build docker image
          command: docker build -t rg.fr-par.scw.cloud/clement-registry/<<parameters.registry>> <<parameters.image>>
      - run:
          name: Push image to registry
          command: docker push rg.fr-par.scw.cloud/clement-registry/<<parameters.registry>>

  deploy:
    docker:
      - image: circleci/node:16.10.0
    working_directory: ~/project
    parameters:
      service:
        default: ""
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Login to Scaleway image registry
          command: docker login rg.fr-par.scw.cloud/clement-registry -u nologin -p $SCW_SECRET_KEY
      - run:
          name: Setup Docker context
          command: unset DOCKER_HOST && docker context create scaleway --docker host=ssh://root@51.159.163.97
      - run:
          name: Delete containers on remote host
          command: docker-compose --context scaleway stop <<parameters.service>> && docker-compose --context scaleway rm -f <<parameters.service>>
      - run:
          name: Pulling images
          command: docker-compose --context scaleway pull <<parameters.service>>
      - run:
          name: Up containers on remote host
          command: docker-compose --context scaleway up -d <<parameters.service>>

workflows:
  version: 2
  build-and-deploy-back-end:
    when: << pipeline.parameters.run-build-back-end-job >>
    jobs:
      - prepare-dependencies:
          folder: "back-end"
      - back-end-checks:
          requires:
            - prepare-dependencies
      - build:
          image: "back-end"
          registry: "todo-back-end"
          requires:
            - back-end-checks
          filters:
            branches:
              only:
                - main
      - deploy:
          service: "api"
          requires:
            - build

  build-and-deploy-front-end:
    when: << pipeline.parameters.run-build-front-end-job >>
    jobs:
      - prepare-dependencies:
          folder: "front-end"
      - front-end-checks:
          requires:
            - prepare-dependencies
      - build:
          image: "front-end"
          registry: "todo-front-end"
          requires:
            - front-end-checks
          filters:
            branches:
              only:
                - main
      - deploy:
          service: "web"
          requires:
            - build
